{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
\f3\fmodern\fcharset0 CourierNewPS-BoldItalicMT;}
{\colortbl;\red255\green255\blue255;}
\vieww12960\viewh14500\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf0 ================================================================\

\f1\b Questions g\'e9n\'e9rales\

\f0\b0 ================================================================\

\f1\b \
Moi:\

\f0\b0 Pr\'e9sentez-vous!\
Quels sont vos objectifs?\
Quelles sont vos faiblesses?\
Qu\'92est-ce qui est le plus important dans votre vie ?\
Pourquoi avez-vous quitt\'e9 votre emploi?\
Qu\'92avez-vous fait depuis votre dernier emploi ?\
Quel poste aimeriez-vous occuper dans 5 ans ?\
Pourquoi changez-vous d'emploi constamment ?\

\f1\b \
Eux:\

\f0\b0 Pourquoi voulez-vous travailler ici?\
Que connaissez-vous de notre entreprise ?\
Pourquoi devrait-on vous embaucher?\
Pourquoi vous et pas les autres candidats?\
Pouvez-vous me pr\'e9ciser ce que vous avez compris du poste ?\
Vous n\'92avez aucune exp\'e9rience \'e0 ce type de poste, comment comptez vous faire pour vous adapter ?\
Qu\'92est ce qui selon vous va vous poser des difficult\'e9s \'e0 ce poste ?\

\f1\b \
Travail:\

\f0\b0 Comment travaillez-vous en \'e9quipe ? 
\f2\i How do you resolve issues in a team?
\f1\i0\b \

\f0\b0 De quoi \'eates-vous le plus fier (dernier emploi) ?\
De quoi \'eates-vous le plus fier (carri\'e8re) ?\
Quand \'e9tiez-vous le plus satisfait dans votre emploi? \
Trois choses positives que votre employeur pr\'e9c\'e9dent dirait?\
\

\f1\b D'autres:\

\f0\b0 Disponibilit\'e9?
\f1\b \

\f0\b0 Quel salaire recherchez-vous? Quelle r\'e9mun\'e9ration attendez-vous?\
Avez-vous des questions \'e0 nous poser ?\
\
================================================================\

\f1\b Questions techniques\

\f0\b0 ================================================================\

\f1\b Web:
\f2\i\b0 \
Explain the difference between stateless and stateful protocols.\
\pard\pardeftab720\li720\partightenfactor0

\f0\i0\fs18 \cf0 A stateless communications protocol treats each request as an independent transaction. It therefore does not require the server to retain any session, identity, or status information spanning multiple requests from the same source. Similarly, the requestor can not rely on any such information being retained by the responder.\
\
In contrast, a stateful communications protocol is one in which the responder maintains \'93state\'94 information (session data, identity, status, etc.) across multiple requests from the same source.\
\pard\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 Why is HTTP a stateless protocol?\
\pard\pardeftab720\li720\partightenfactor0

\f0\i0\fs18 \cf0 HTTP is a stateless protocol because it does not require the server to retain information or status about each user for the duration of multiple requests.\
\
Some web servers implement states using different methods (using cookies, custom headers, hidden form fields etc.). However, in the very core of every web application everything relies on HTTP which is still a stateless protocol that is based on simple request/response paradigm.
\f1\b \
\pard\pardeftab720\partightenfactor0

\f2\i\b0\fs22 \cf0 \
What does RESTful mean?\
\
What are the HTTP request types?\
\pard\pardeftab720\li720\partightenfactor0

\f0\i0\fs18 \cf0 The purpose of each of the HTTP request types when used with a RESTful web service is as follows:\
\
GET: Retrieves data from the server (should only retrieve data and should have no other effect).\
\
POST: Sends data to the server for a new entity. It is often used when uploading a file or submitting a completed web form.\
\
PUT: Similar to POST, but used to replace an existing entity.\
\
PATCH: Similar to PUT, but used to update only certain fields within an existing entity.\
\
DELETE: Removes data from the server.\
\
TRACE: Provides a means to test what a machine along the network path receives when a request is made. As such, it simply returns what was sent.\
\
OPTIONS: Allows a client to request information about the request methods supported by a service. The relevant response header is Allow and it simply lists the supported methods. (It can also be used to request information about the request methods supported for the server where the service resides by using a * wildcard in the URI.)\
\
HEAD: Same as the GET method for a resource, but returns only the response headers (i.e., with no entity-body).\
\
CONNECT: Primarily used to establish a network connection to a resource (usually via some proxy that can be requested to forward an HTTP request as TCP and maintain the connection). Once established, the response sends a 200 status code and a \'93Connection Established\'94 message.\
\pard\pardeftab720\partightenfactor0

\f2\i\fs22 \cf0 \
What kind of data is passed via HTTP Headers?\
\pard\pardeftab720\partightenfactor0

\f0\i0 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i \cf0 What is a \'93MIME type\'94? What is it used for?\
\pard\pardeftab720\li720\partightenfactor0

\f0\i0\fs18 \cf0 MIME is an acronym for Multi-purpose Internet Mail Extensions. It is used as a standard way of classifying file types over the Internet.\
\
Web servers and browsers have a defined list of MIME types, which facilitates transfer of files of a known type, irrespective of operating system or browser.\
\
A MIME type actually has two parts: a type and a subtype that are separated by a slash (/). For example, the MIME type for Microsoft Word files is application/msword (i.e., type is application and the subtype is msword).\
\pard\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 How do cookies work? What is an example of Cookie abuse?\
What is 'ViewState' and 'SessionState'?
\f0\i0 \
\pard\pardeftab720\li720\partightenfactor0

\f2\i\fs18 \cf0 'ViewState' is specific to a page in a session.\
\
'SessionState' is specific to user specific data that can be accessed across all pages in the web application.\
\pard\pardeftab720\partightenfactor0

\f1\i0\b\fs22 \cf0 \
Back-end:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 How would you model user authorization, user profiles and permissions in a database?\
Can you name some different text file formats for storing unicode characters?\
How would you store the value of a color in a database, as efficiently as possible?\
What are microservices?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 A microservice architecture means that your app is made up of lots of smaller, independent applications capable of running in their own memory space and scaling independently from each other across potentially many separate machines.
\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
What are monolithic architectures, then?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 A monolithic architecture means that your app is written as one cohesive unit of code whose components are designed to work together, sharing the same memory space and resources.
\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
What are the pros and cons of monolithic vs microservice?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 Monolithic Pros:\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 The major advantage of the monolithic architecture is that most apps typically have a large number of cross-cutting concerns, such as logging, rate limiting, and security features such audit trails and DOS protection.\
\
When everything is running through the same app, it\'92s easy to hook up components to those cross-cutting concerns. There can also be performance advantages, since shared-memory access is faster than inter-process communication (IPC).\
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
Monolithic Cons: \
\pard\pardeftab720\li1440\partightenfactor0
\cf0 Monolithic app services tend to get tightly coupled and entangled as the application evolves, making it difficult to isolate services for purposes such as independent scaling or code maintainability.\
\
Monolithic architectures are also much harder to understand, because there may be dependencies, side-effects, and magic which are not obvious when you\'92re looking at a particular service or controller.\
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
Microservice Pros: \
\pard\pardeftab720\li1440\partightenfactor0
\cf0 Microservice architectures are typically better organized, since each microservice has a very specific job, and is not concerned with the jobs of other components. Decoupled services are also easier to recompose and reconfigure to serve the purposes of different apps (for example, serving both the web clients and public API).\
\
They can also have performance advantages depending on how they\'92re organized because it\'92s possible to isolate hot services and scale them independent of the rest of the app.\
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
Microservice Cons: \
\pard\pardeftab720\li1440\partightenfactor0
\cf0 As you\'92re building a new microservice architecture, you\'92re likely to discover lots of cross-cutting concerns that you did not anticipate at design time. A monolithic app could establish shared magic helpers or middleware to handle such cross-cutting concerns without much effort.\
\
In a microservice architecture, you\'92ll either need to incur the overhead of separate modules for each cross-cutting concern, or encapsulate cross-cutting concerns in another service layer that all traffic gets routed through.\
\
Eventually, even monolthic architectures tend to route traffic through an outer service layer for cross-cutting concerns, but with a monolithic architecture, it\'92s possible to delay the cost of that work until the project is much more mature.
\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\i0\b \cf0 Database/SQL:
\f2\i\b0 \
What's the difference between a left join and an inner join?\
What are NoSQL databases?\
What are the different types of NoSQL databases?\
Which are the most important features of NoSQL databases?\
Explain the difference between NoSQL v/s Relational database?\
When should I use a NoSQL database instead of a relational database?\
What are ACID properties?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 ACID stands for Atomicity, Consistency, Isolation and Durability.\
\
Atomicity\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 It means that either the record/document updates completely or does not update with respect to the operation.\
Either everything occurs or nothing occurs.\
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
Consistency\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 It implies that a transaction either creates a new and valid state of data, or, if any failure occurs, returns all data to its state before the transaction was started.\
If successful then valid data else revert back to original data.\
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
Isolation\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 Two or more simultaneous database queries should run independent of the other transactions.\
\
\pard\pardeftab720\li720\partightenfactor0
\cf0 Durability\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 Data once committed should be saved in memory so that even in case of system failure, data is not affected.
\f0\i0 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \

\f1\b Practical:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 Write your own linked list class without using the built-in classes.\
Write your own hashtable class without using the built-in classes.\
Write a class that represents a binary tree. Write a method that traverses all nodes of the tree.\
Write a method to perform a binary search on an array without using built-in methods.\
Draw a database schema for a blog. Each user only has one blog, each blog has many categories, each category has many posts, and each post can belong to more than one category. Ask your applicant to write queries to pull specific information out.
\f0\i0 \
\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 Algorithmes:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 How do you find out if a number is a power of 2? And how do you know if it is an odd number?\
How would you change the format of all the phone numbers in 10,000 static html web pages?\
How would you write a function to reverse a string? And can you do that without a temporary string?\
In an array with integers between 1 and 1,000,000 one value is in the array twice. How do you determine which one?\
Can you name an example of a recursive solution that you created?\
What is the last thing you learned about algorithms from a book, magazine or web site?\
\
\pard\pardeftab720\partightenfactor0

\f1\i0\b \cf0 Data Structures:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What is a pointer?
\f1\i0\b \

\f2\i\b0 How do you find the middle item in a linked list?\
What is a hashtable?\
Which is faster: finding an item in a hashtable or in a sorted list?\
What is the difference between a queue and a stack?\
\pard\pardeftab720\li720\partightenfactor0

\f0\i0\fs18 \cf0 Stacks refer to a list in which all items are accessed and processed on the Last-In-First-Out (LIFO) basis. In a stack, elements are inserted (push operation) and deleted (pop operation) from the same end called top.\
\
Queues refer to a list in which insertion and deletion of an item is done on the First-In-First-Out (FIFO) basis. The items in a queue are inserted from the one end, called the rear end, and are deleted from the other end, called the front end of the queue.\
\pard\pardeftab720\partightenfactor0

\f2\i\fs22 \cf0 What is the difference between storing data on the heap vs. on the stack?
\f0\i0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 General/OOP:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What is abstraction?
\f3\b \

\f2\b0 What is inheritance?\
What is polymorphism?\
What is encapsulation?\
What is the difference between a class and an object/instance?
\f1\i0\b \

\f2\i\b0 What is a constructor?\
What is a destructor?\
What is an abstract class\
What is operator overloading?\
What is method overloading?\
What is method overriding?\
How does overriding differ from overloading?\
How does pass by value differ from pass by reference?\
What is 'this'?\
What is 'super'?\
What is boxing?\
What is a singleton?\
What are design patterns?\
Which design patterns have you used, and in what situations?\
What is Dependency Injection?\
What are the SOLID principles of Object-oriented development?
\f1\i0\b \
\
JavaScript:\

\f2\i\b0 What are global variables?
\fs18 \
\pard\pardeftab720\li720\partightenfactor0
\cf0 Global variables are available throughout your code: that is, the variables have no scope. Local variables scope, on the other hand, is restricted to where it is declared (like within a function). The var keyword is used to declare a local variable or object, while omitting the var keyword creates a global variable.\
\
Most JavaScript developers avoid globals. One reason why is they're averse to naming conflicts between local and globals, Also, code that depends on globals can be difficult to maintain and test.\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
What is the difference between undefined and null?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 The value of a variable with no value is undefined (i.e., it has not been initialized). Variables can be emptied by setting their value to null. You can test for each using the === (three equal signs) or == (two equal signs) for comparison checking. The big difference is the latter uses coercion, which can have some odd results \'97 it returns true for a null or undefined comparison if they are either.
\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
What is JavaScript's this keyword?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 JavaScript's this keyword normally refers to the object that owns the method, but it depends on how a function is called. Basically, it points to the currently in scope object that owns where you are in the code. When working within a Web page, this usually refers to the Window object. If you are in an object created with the new keyword, the this keyword refers to the object being created. When working with event handlers, JavaScript's this keyword will point to the object that generated the event.\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
What is event bubbling?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 Event bubbling describes the behavior of events in child and parent nodes in the Document Object Model (DOM); that is, all child node events are automatically passed to its parent nodes. The benefit of this method is speed, because the code only needs to traverse the DOM tree once. This is useful when you want to place more than one event listener on a DOM element since you can put just one listener on all of the elements, thus code simplicity and reduction. One application of this is the creation of one event listener on a page's body element to respond to any click event that occurs within the page's body.
\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
How does JavaScript's prototype-based OOP differentiate it from other class-based languages?\
How do classes in JavaScript differ from those in other languages?\
How do properties of objects work in JavaScript?\
How does inheritance work in JavaScript?\
What is === operator? How is it different from the == operator?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 === is called as strict equality operator which returns true when the two operands have the same value and are of the same type.\
== only checks for value after type-converting the operands into the 'best' format, according to ECMA specs.
\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
What is an anonymous function in JavaScript?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 A function that is declared without any named identifier is known as an anonymous function. In general, an anonymous function is inaccessible after its declaration.
\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
What is a closure?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 A closure is an inner function that has access to the variables in the outer (enclosing) function\'92s scope chain. The closure has access to variables in three scopes; specifically: (1) variable in its own scope, (2) variables in the enclosing function\'92s scope, and (3) global variables.\
\
Here is a simple example:\
\
var globalVar = "xyz";\
\
(function outerFunc(outerArg) \{\
  var outerVar = 'a';\
  \
  (function innerFunc(innerArg) \{\
    var innerVar = 'b';\
    \
    console.log(\
      "outerArg = " + outerArg + "\\n" +\
      "innerArg = " + innerArg + "\\n" +\
      "outerVar = " + outerVar + "\\n" +\
      "innerVar = " + innerVar + "\\n" +\
      "globalVar = " + globalVar);\
    \
  \})(456);\
\})(123);\
\
In the above example, variables from innerFunc, outerFunc, and the global namespace are all in scope in the innerFunc. The above code will therefore produce the following output:\
\
outerArg = 123\
innerArg = 456\
outerVar = a\
innerVar = b\
globalVar = xyz\
\pard\pardeftab720\partightenfactor0

\f1\i0\b\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 Why would we wrap the entire content of a JavaScript source file in a function block?\
What frameworks do you use?\
\pard\pardeftab720\partightenfactor0

\f1\i0\b \cf0 \
\
TypeScript:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What is TypeScript? Why should we use it?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 JavaScript is the only client side language universally supported by all browsers. But JavaScript is not the best designed language. It\'92s not a class-based object-oriented language, doesn\'92t support class based inheritance, unreliable dynamic typing and lacks in compile time error checking. And TypeScript addresses all these problems. In other words, TypeScript is an attempt to \'93fix\'94 JavaScript problems.\
\
TypeScript is a free and open source programming language developed and maintained by Microsoft. It is a strict superset of JavaScript, and adds optional static typing and class-based object-oriented programming to the language. TypeScript is quite easy to learn and use for developers familiar with C#, Java and all strong typed languages. At the end of day \'93TypeScript is a language that generates plain JavaScript files.\'94
\f1\i0\b \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What are the pros of TypeScript?\
\pard\pardeftab720\li720\fi-360\partightenfactor0

\fs18 \cf0 It helps in code structuring\
Use class based object oriented programming\
Impose coding guidelines\
Offers type checking\
Compile time error checking
\f1\i0\b\fs22 \

\f2\i\b0\fs18 Intellisense
\f1\i0\b\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What are some cons of using TypeScript?
\fs18 \
\pard\pardeftab720\li720\fi-360\partightenfactor0
\cf0 TypeScript is just another way to write JavaScript. It doesn\'92t fix the problems of JavaScript. It just creates an illusion that it does.\
One more tool to learn.\
TypeScript has dependency on type definition files, if you wish to use any existing JavaScript libraries.\
Quality of type definition files is a concern as how can you be sure the definitions are correct?\
Frequent releases of new versions JavaScript library is also a pain area. Because if their type definition files are not updated then you can\'92t use them instantly.\
In order to run the application in the browser, a compile step is required to transform TypeScript into JavaScript.\
Web developers are using JavaScript from decades and TypeScript doesn\'92t bring anything new.\
To use any third party library, definition file is you need. And not all the third party library have definition file available.
\f1\i0\b\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
NodeJs:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What is asynchronous programming? Why is it important in Node?
\f1\i0\b \
\pard\pardeftab720\li720\partightenfactor0

\f2\i\b0\fs18 \cf0 Synchronous programming means that, barring conditionals and function calls, code is executed sequentially from top-to-bottom, blocking on long-running tasks such as network requests and disk I/O.\
\
Asynchronous programming means that the engine runs in an event loop. When a blocking operation is needed, the request is started, and the code keeps running without blocking for the result. When the response is ready, an interrupt is fired, which causes an event handler to be run, where the control flow continues. In this way, a single program thread can handle many concurrent operations.\
\
User interfaces are asynchronous by nature, and spend most of their time waiting for user input to interrupt the event loop and trigger event handlers.\
\
Node is asynchronous by default, meaning that the server works in much the same way, waiting in a loop for a network request, and accepting more incoming requests while the first one is being handled.\
\
This is important in JavaScript, because it is a very natural fit for user interface code, and very beneficial to performance on the server.\
\pard\pardeftab720\partightenfactor0

\f1\i0\b\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What does event-driven programming mean?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 In computer programming, event driven programming is a programming paradigm in which the flow of the program is determined by events like messages from other programs or threads. It is an application architecture technique divided into two sections 1) Event Selection 2) Event Handling
\f1\i0\b\fs22 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 Where can we use node.js?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 Web applications ( especially real-time web apps )\
Network applications\
Distributed systems\
General purpose applications\
\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 What is the advantage of using node.js?\
\pard\pardeftab720\li720\partightenfactor0

\f0\i0\fs18 \cf0 Aynchronous and Event Driven:\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call.\
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
Very Fast:\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.\
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
Single Threaded but highly Scalable:\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 Node.js uses a single threaded model with event looping. Event mechanism helps server to respond in a non-bloking ways and makes server highly scalable as opposed to traditional servers which create limited threads to handle requests. Node.js uses a single threaded program and same program can services much larger number of requests than traditional server like Apache HTTP Server.\
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
No Buffering:\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 Node.js applications never buffer any data. These applications simply output the data in chunks.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\fs22 \cf0 What are the pros and cons of Node.js?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 Pros:\
	If your application does not have any CPU intensive computation, you can build it in Javascript top to bottom, even down to the database level if you use JSON storage object DB like MongoDB.\
	Crawlers receive a full-rendered HTML response, which is far more SEO friendly rather than a single page application or a websockets app run on top of Node.js.\
\
Cons:\
	Any intensive CPU computation will block node.js responsiveness, so a threaded platform is a better approach.\
	Using relational database with Node.js is considered less favourable\
\pard\pardeftab720\partightenfactor0

\f1\i0\b\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What is a Callback?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 Callback is an asynchronous equivalent for a function.\
\
A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All APIs of Node are written is such a way that they supports callbacks.\
\
For example, a function to read a file may start reading file and return the control to execution environment immidiately so that next instruction can be executed. Once file I/O is complete, it will call the callback function while passing the callback function, the content of the file as parameter. So there is no blocking or wait for File I/O. This makes Node.js highly scalable, as it can process high number of request without waiting for any function to return result.
\fs22 \
\pard\pardeftab720\partightenfactor0

\f1\i0\b \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What is callback hell and how can it be avoided?
\f1\i0\b \
\pard\pardeftab720\li720\partightenfactor0

\f2\i\b0\fs18 \cf0 Callback hell refers to a coding pattern where there is a lot of nesting of callback functions. The code forms a pyramid like structure and it becomes difficult to debug.\
\
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 Explain the non-blocking nature of Node?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 If application has to wait for some I/O operation in order to complete its execution any further then the code responsible for waiting is known as blocking code. By providing callback function. Callback function gets called whenever corresponding event triggered.
\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
What is a Promise?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 A promise is a method that eventually produces a value. Instead of passing a function as argument as with callbacks, \'93Once the result is received from an asynchronous operation then the required function is executed\'94. The required functions are never passed as arguments to the asynchronous operation. E.g.\
\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 callAsyncFunction()\
.then(firstFunction)\
.then(secondFunction)\
.then(thirdFunction)\
.then(fourthFunction);
\f1\i0\b\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What is the Event loop?\
\pard\pardeftab720\li720\partightenfactor0

\fs18 \cf0 Node js is a single threaded application but it support concurrency via concept of event and callbacks. As every API of Node js are asynchronous and being a single thread, it uses async function calls to maintain the concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever any task get completed, it fires the corresponding event which signals the event listener function to get executed.
\f1\i0\b\fs22 \
\pard\pardeftab720\partightenfactor0
\cf0 \
C# Questions:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 What is the difference between a struct and a class?\
\pard\pardeftab720\li720\partightenfactor0

\f0\i0\fs18 \cf0 Class:\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 A class is a reference type.\
While instantiating a class, CLR allocates memory for its instance in heap.\
Classes support inheritance.\
Variables of a class can be assigned as null.\
Class can contain constructor/destructor. \
\pard\pardeftab720\partightenfactor0
\cf0 \
	Structure:\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 A structure is a value type.\
In structure, memory is allocated on stack.\
Structures do not support inheritance.\
Structure members cannot have null values.\
Structure does not require constructor/destructor and members can beinitialiazed automatically.\
\pard\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 Difference between abstract class and an interface?\
\pard\pardeftab720\li720\partightenfactor0

\f0\i0\fs18 \cf0 Abstract Class:\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 A class can extend only one abstract class\
The members of abstract class can be private as well as protected.\
Abstract classes should have subclasses\
Any class can extend an abstract class.\
Methods in abstract class can be abstract as well as concrete.\
There can be a constructor for abstract class.\
The class extending the abstract class may or may not implement any of its method.\
An abstract class can implement methods. \
\pard\pardeftab720\li720\partightenfactor0
\cf0 \
Interface\
\pard\pardeftab720\li1440\partightenfactor0
\cf0 A class can implement several interfaces\
An interface can only have public members.\
Interfaces must have implementations by classes\
Only an interface can extend another interface.\
All methods in an interface should be abstract\
Interface does not have constructor.\
All methods of interface need to be implemented by a class implementing that interface.\
Interfaces cannot contain body of any of its method.\
\pard\pardeftab720\li720\partightenfactor0

\f2\i\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 What are collections and generics?\
What is a delegate?\
What is an event?\
When do you use polymorphism and when do you use delegates?\
What is the virtual keyword used for?\
Why use a private constructor?\
Why use a static constructor?\
What is the difference between a static and a non-static method?\
How do you prevent a class from being inherited?\
Is string a value type or a reference type?\
What is the difference between protected and internal?\
What about "protected internal"?\
What is the StringBuilder class? Why use it?\
What is the difference between 'ref' and 'out'?\
What is a weak-reference? When would you want to use one?\
What is the difference between 'readonly' and 'const'?\
What is strong-typing versus weak-typing?\
What is the difference between a thread and a process?\
What is Reflection?\
What is the difference between early-binding and late-binding?\
What is lazy-loading?\
\
\pard\pardeftab720\partightenfactor0

\f1\i0\b \cf0 ASP.NET\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\i0\b \cf0 Testing/Debugging:\
\pard\pardeftab720\partightenfactor0

\f2\i\b0 \cf0 Can you explain what Test-Driven Development is?\
How do you test for the quality of your code?
\f0\i0 \

\f2\i How do you make sure that your code handles different kinds of error situations?\
How do you make sure that your code is both safe and fast?\
How do you find an error in a large file with code that you cannot step through?\
Can you tell me something that you have learned about testing and quality assurance in the last year?
\f0\i0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 SDLC:
\f0\b0 \
\pard\pardeftab720\partightenfactor0

\f2\i \cf0 Can you describe the process you use for writing a piece of code, from requirements to delivery?\
What is important when updating a product that is in production and is being used?\
How can you make sure that changes in code will not affect any other parts of the product?\
How do you create technical documentation for your products?\
What measures have you taken to make your software products more easily maintainable?\
How can you debug a system in a production environment, while it is being used?\
Can you name reasons why maintenance of software is the biggest/most expensive part of an application\'92s life cycle?\
How can you make sure that team members know who changed what in a software project?\
\
\pard\pardeftab720\partightenfactor0

\f1\i0\b \cf0 D'autres:
\f2\i\b0 \
Describe the project you've worked on?\
What did you do that worked out particularly well?\
What would you do differently?\
What industry sites and blogs do you read regularly?
\f0\i0 \
}